unit uRAM;

{$mode objfpc}{$H+}

interface


uses
<<<<<<< HEAD
  Classes, SysUtils, Dialogs;

type TRAM = class
  var
    bla : Cardinal;

  constructor Create(size : Cardinal);
=======
  Classes, SysUtils, LazLogger, Dialogs;

type
  TRAM = class
  var
    logfile : File of Byte;
    log : TFileStream;

    constructor Create(size: cardinal);
>>>>>>> Compiler

    destructor Destroy; override;

  { Vor.: addr < size
    Effekt: -
    Ergebnis: Liefert das Byte an Adresse addr.
  }

  function ReadByte(addr : Cardinal) : Byte;

  { Vor.: addr < size
    Effekt: -
    Ergebnis: Setzt das Byte an Adresse addr auf b.
  }
  procedure WriteByte(addr : Cardinal; b : Byte);

  { Vor.: addr < size-1
    Effekt: -
    Ergebnis: Liefert das Wort ab Adresse addr.
  }
  function ReadWord(addr : Cardinal) : Word;

  { Vor.: addr < size-1
    Effekt: -
    Ergebnis: Setzt das Wort ab Adresse addr auf w.
  }
<<<<<<< HEAD
  procedure WriteWord(addr : Cardinal; w : Word);

end;

implementation
   constructor TRAM.Create(size : Cardinal);
   begin
     bla := 125;
   end;
   function TRAM.ReadByte(addr : Cardinal) : Byte;
   var value : String ;
   begin
    // InputQuery('RAM TEST', format('Gelesen wird Byte an Adresse %x', [addr]), value);
     result := Random(17) ;//StrToInt64('$'+value);
   end;
   procedure TRAM.WriteByte(addr : Cardinal; b : Byte);
   begin
  //   ShowMessage(format('Geschrieben wird an Adresse %x das Byte %x',[addr,b]));
   end;
   function TRAM.ReadWord(addr : Cardinal) : Word;
   var value : String ;
   begin
 //    InputQuery('RAM TEST', format('Gelesen wird Word an Adresse %x', [addr]), value);
     result := Random(17) ;//StrToInt64('$'+value);
   end;
   procedure TRAM.WriteWord(addr : Cardinal; w : Word);
   begin
 //    ShowMessage(format('Geschrieben wird an Adresse %x das Word %x',[addr,w]));
   end;
=======
    procedure WriteWord(addr: cardinal; w: word);

  end;

implementation

constructor TRAM.Create(size: cardinal);
begin
  log := TFileStream.Create('ram.bin', fmCreate);
  log.Seek(0, TSeekOrigin.soBeginning);
  //AssignFile(logfile, 'ram.bin');
  //Rewrite(logfile);
end;

destructor TRAM.Destroy();
begin
  //CloseFile(logfile);
  log.Free;
  //log.Destroy;
end;

function TRAM.ReadByte(addr: cardinal): byte;
begin

end;

procedure TRAM.WriteByte(addr: cardinal; b: byte);
begin
  //ShowMessage('Writing byte ' + IntToStr(b) + ' at ' + IntToStr(addr));
  //DebugLn('Writing byte at ' + IntToStr(addr) + ': "' + IntToStr(b) + '"');
  //Seek(logfile, addr);
  //Write(logfile, b);
  log.Seek(addr, soBeginning);
  log.WriteByte(b);
end;

function TRAM.ReadWord(addr: cardinal): word;
begin

end;

procedure TRAM.WriteWord(addr: cardinal; w: word);
begin
  //ShowMessage('Writing word ' + IntToStr(w) + ' at ' + IntToStr(addr));
  //DebugLn('Writing word at ' + IntToStr(addr) + ': "' + IntToStr(w) + '"');
  //Seek(logfile, addr);
  //Write(logfile, w and 65280);
  //Write(logfile, w and 240);
  log.Seek(addr, soBeginning);
  log.WriteWord(w);
end;
>>>>>>> Compiler

end.

